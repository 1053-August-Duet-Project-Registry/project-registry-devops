# SonarCloud configuration for Maven builds expects JDK 11
#
# External requirements:
# ----------------------
# In order to guard secrets, some variables groups must be pulled from the
# ADO library and called in the pipeline YAML file before using this
# template.
# The variable groups for the original use case have the following names and contents:
# - project-registry-sonarcloud:  stores sonarcloud variables/secrets
#   - sonarKeyPrefix:             the common prefix string for the sonar keys in the project
#       (requires a sonarCloud project key)
#   - sonarNamePrefix:            the common prefix string for the project names
#   - sonarOrg:                   the sonar organization
#   - sonarUrlPrefix:             the common prefix string for the url for the results
# - project-registry-discord:     stores discord variables/secrets
#   - discordAnalysisChannel:     the output channel for discord analysis info
#   - discordAnalysisKey:         the webhook key associated with the above channel
# Example of calling the variable groups:
#   variables:
#   - group: project-registry-sonarcloud
#   - group: project-registry-discord
# Note: The sonar information uses prefixes instead of whole keys so that the secrets
#       stored in the ADO library are limited, using the microservice piece which is
#       already being passed as a parameter.
#
# Functionality Caveat: Angular builds not successfully tested
# ---------------------
# All code blocks using the angular flag have not been successfully tested.  
# The code not been removed for three reasons:
# 1) it functions without a template, and so provides a central record of how
#    the Angular build tasks function
# 2) we hope to revisit and debug the errors that prevent the template from
#    functioning as expected.  As it stands, it appears that the Angular tasks
#    do not function when a job checks out multiple repositories for some reason
# 3) We believe that the code in this template is correct, but the error appears
#    to exist on the side of the calling YAML file and associated setup, therefore
#    a savvy user may be able to utilize the functionality even if we were not
#    successful in doing so.
# Therefore, the code is included with the caveat of not being successfully tested

parameters:
- name: microservice  # <-- e.g., gateway, account-microservice
  type: string
- name: coveragePath  # <-- may override the coverage path if desired
  type: string
  default: ''
- name: workDir       # <-- will need to override with multi-repo subdirectory
  type: string        #     e.g., ./project-registry-tracking-microservice/
- name: angular       # <-- Not successfully tested; see note above
  type: boolean       #     (default is a Maven build when angular = false
  default: false      #      the Angular build steps will substitute when angular = true)

steps:
- ${{ if eq(parameters.angular, true) }}: # <-- Angular build not successfully tested; see note above
  - task: SonarCloudPrepare@1 # <-- See external requirements note above
    inputs:
      SonarCloud: 'SonarCloud'
      organization: $(sonarOrg) 
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: $(sonarKeyPrefix)${{ parameters.microservice }}
      cliSources: '${{ parameters.workDir }}'
    displayName: Prepare Analysis for ${{ parameters.microservice }} --> Task

  - script: cd $(System.DefaultWorkingDirectory)${{ parameters.workDir }} && npm ci
    displayName: Install dependencies for ${{ parameters.microservice }} --> Task

  - script: cd $(System.DefaultWorkingDirectory)${{ parameters.workDir }} && npm run build
    displayName: Build ${{ parameters.microservice }} --> Task

  - task: SonarCloudAnalyze@1
    displayName: Analyze ${{ parameters.microservice }} --> Task
# End of Angular-specific Analysis Steps --> if

- ${{ if eq(parameters.angular, false) }}:  # <-- Maven build is the default
  - task: SonarCloudPrepare@1 # <-- See external requirements note above
    inputs:
      SonarCloud: 'SonarCloud'
      organization: $(sonarOrg)
      scannerMode: 'Other'
      extraProperties: |
        sonar.projectKey=$(sonarKeyPrefix)${{ parameters.microservice }}
        sonar.projectName=$(sonarNamePrefix)${{ parameters.microservice }}
    displayName: Prepare Analysis for ${{ parameters.microservice }} --> Task

  - task: 'Maven@3'
    inputs:
      mavenPomFile: ${{ parameters.workDir }}pom.xml
      publishJUnitresults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      codeCoverageToolOption: 'JaCoCo'
      codeCoverageClassFilesDirectories: ${{ parameters.coveragePath }}
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      mavenVersionOption: 'Default'
      mavenOptions: '-Xmx3072m'
      mavenAuthenticateFeed: false
      effectivePomSkip: false
      sonarQubeRunAnalysis: true
      sqMavenPluginVersionChoice: 'latest'
    displayName: Build/Analyze ${{ parameters.microservice }} --> Task
# End of Maven-specific Analysis steps --> if

- task: SonarCloudPublish@1
  condition: always()
  inputs:
    pollingTimeoutSec: '300'
  displayName: Publish Analysis of ${{ parameters.microservice }} --> Task

- task: 'ado-discord-webhook@1' # <-- See external requirements note above
  condition: always()
  inputs:
    channelId: $(discordAnalysisChannel)
    webhookKey: $(discordAnalysisKey)
    name: $(System.TeamProject)
    messageType: 'content'
    content: | 
          **__Analysis Report__**
          **Status:** $(Agent.JobStatus)
          **Branch:** $(Build.SourceBranch)
          **Trigger:** $(Build.Reason)
          **Message:** $(Build.SourceVersionMessage)
          **Report:** <$(sonarUrlPrefix)$(Build.SourceBranch)&id=$(sonarKeyPrefix)${{ parameters.microservice }}>
          **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
          **Repo:** <https://github.com/$(Build.Repository.Name)>
  displayName: Notification --> Task
