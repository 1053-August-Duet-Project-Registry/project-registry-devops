# This pipeline is NEVER triggered automatically.
# This pipeline is used for initialization of a new (or cleared) kubernetes cluster.
# Running this pipeline unnecessarily may cause the ingress IP address to reset.
# The ingress IP address is how you access the application, so...
# BE CAREFUL!!!
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

parameters:
# to initialize the staging environment k8sServiceConnection should be 'k8s-team1-config-staging'
# to initialize the development environment k8sServiceConnection should be 'k8s-team1-config-dev'
- name: k8sServiceConnection
  type: string
  default: 'k8s-team1-config-staging'
  values:
  - 'k8s-team1-config-dev'
  - 'k8s-team1-config-staging'
- name: targetCluster
  type: string
  default: 'k8s-team1-config-staging'

variables:
  containerServiceConnection: 'acr-team1'         # <-- the service connection for the container registry
  namespace: 'team1'                              # <-- the application's k8s namespace
  prereqManifestPath: 'k8s/prerequisites/*'       # <-- the path to the directory that contains the
                                                  #     manifests for the cluster prerequisites
  microserviceManifestPath: 'k8s/microservices/*' # <-- the path to the directory that contains the
                                                  #     manifests for the application microservice manifests

stages:
  - stage: Helm
    jobs:
    - job:
      steps:
        - task: HelmInstaller@0
          inputs:
            helmVersion: '3.1.1'
            installKubectl: true

        - task: CmdLine@2
          displayName: "Download Istio"
          inputs:
            script: |
              curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.10.3 sh -

        # this requires the namespace to already exist
        - task: HelmDeploy@0
          displayName: "Deploy Istio Base"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: 'istio-1.10.3/manifests/charts/base'
            releaseName: 'istio-base'
            arguments: '--atomic'
            
        - task: HelmDeploy@0
          displayName: "Deploy Istio Discovery"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: 'istio-1.10.3/manifests/charts/istio-control/istio-discovery'
            releaseName: 'istiod'
            waitForExecution: false
            arguments: '--atomic'
          
        - task: HelmDeploy@0
          displayName: "Deploy Istio Ingress"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: 'istio-1.10.3/manifests/charts/gateways/istio-ingress'
            releaseName: 'istio-ingress'
            arguments: '--atomic'

        - task: HelmDeploy@0
          displayName: "Get Prometheus/Grafana Chart Repo"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'repo'
            arguments: 'add prometheus-community https://prometheus-community.github.io/helm-charts'

        - task: HelmDeploy@0
          displayName: "Get Loki Chart Repo"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'repo'
            arguments: 'add grafana https://grafana.github.io/helm-charts'
            
        - task: HelmDeploy@0
          displayName: "Repo Update"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'repo'
            arguments: 'update'

        - task: HelmDeploy@0
          displayName: "Install Prometheus"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'upgrade'
            chartType: 'Name'
            chartName: 'prometheus-community/kube-prometheus-stack'
            releaseName: 'prometheus-community'
            arguments: '--atomic'
        
        - task: HelmDeploy@0
          displayName: "Install Loki"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.targetCluster }}'
            namespace: 'istio-system'
            command: 'upgrade'
            chartType: 'Name'
            chartName: 'grafana/loki-stack'
            releaseName: 'loki'
            overrideValues: 'grafana.enabled=false,prometheus.enabled=false,prometheus.alertmanager.persistentVolume.enabled=false,prometheus.server.persistentVolume.enabled=false'
            arguments: '--atomic'

  - stage: Kubernetes
    jobs:
      - job:
        steps:
        - task: KubernetesManifest@0
          inputs:
            action: 'createSecret'
            kubernetesServiceConnection: ${{ variables.k8sServiceConnection }}
            namespace: ${{ variables.namespace }}
            secretType: 'dockerRegistry'
            secretName: 'acr-secret'
            dockerRegistryEndpoint: ${{ variables.containerServiceConnection }}
          displayName: set imagePullSecret on cluster

        - task: KubernetesManifest@0
          inputs:
            action: 'deploy'
            kubernetesServiceConnection: ${{ variables.k8sServiceConnection }}
            namespace: ${{ variables.namespace }}
            manifests: ${{ variables.prereqManifestPath }}
          displayName: initialize cluster prerequisites

        - task: KubernetesManifest@0
          inputs:
            action: 'deploy'
            kubernetesServiceConnection: ${{ variables.k8sServiceConnection }}
            namespace: ${{ variables.namespace }}
            manifests: ${{ variables.microserviceManifestPath }}
          displayName: initialize cluster microservices